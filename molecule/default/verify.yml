---
- name: Ensure secondary log is up and running
  hosts:
    - sigsum-secondary
  vars_files:
    - ../../roles/sigsum/defaults/main.yml  # role defaults
    - "host_vars/{{ inventory_hostname }}.yml"  # what converge used
    - host_vars/test.yml  # what this verify playbook additionally uses
  tasks:
    - name: Check that systemd services are running
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - "sigsum-log-secondary@{{ sigsum_logname }}"
        - trillian-server
        - trillian-signer
        - cron
      register: services
      failed_when: services.changed

    - name: Check that primary log is disabled and not running
      ansible.builtin.systemd:
        name: "sigsum-log-primary@{{ sigsum_logname }}"
        state: stopped
        enabled: false
      register: service
      failed_when: service.changed == true

    # TODO: consider using ansible.builtin.uri or ensure curl is installed
    - name: Get tree head
      ansible.builtin.command: |
        curl http://localhost:{{ sigsum_internal_endpoint | split(':') | last }}/{{ sigsum_url_prefix }}/get-secondary-tree-head
      register: secondary_tree_head

    - name: Parse tree size
      ansible.builtin.set_fact:
        secondary_tree_size: "{{ secondary_tree_head.stdout | regex_findall('size=([0-9]+)') | first }}"

- name: Verify that primary log seems to work
  hosts:
    - sigsum-primary
    - sigsum-primary-ssh-agent
  vars_files:
    - ../../roles/sigsum/defaults/main.yml  # role defaults
    - "host_vars/{{ inventory_hostname }}.yml"  # what converge used
    - host_vars/test.yml  # what this verify playbook additionally uses
  tasks:
    - name: Check that systemd services are running
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - "sigsum-log-primary@{{ sigsum_logname }}"
        - trillian-server
        - trillian-signer
        - cron
      register: services
      failed_when: services.changed

    - name: Check that secondary log is disabled and not running
      ansible.builtin.systemd:
        name: "sigsum-log-secondary@{{ sigsum_logname }}"
        state: stopped
        enabled: false
      register: service
      failed_when: service.changed == true

    - name: "Add test user {{ test_user }}"
      ansible.builtin.user:
        name: "{{ test_user }}"
        state: present

    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        owner: "{{ test_user }}"
        group: "{{ test_user }}"
        mode: '0755'
        state: directory
      loop:
        - "{{ test_home }}/.local/bin"
        - "{{ test_home }}/.config/sigsum"

    - name: Copy sigsum-go binaries
      ansible.builtin.copy:
        remote_src: true
        src: "{{ sigsum_home }}/go/bin/{{ item }}"
        dest: "{{ test_home }}/.local/bin/{{ item }}"
        owner: "{{ test_user }}"
        group: "{{ test_user }}"
        mode: '0755'
      loop:
        - sigsum-key
        - sigsum-submit
        - sigsum-verify

    # If there's a soft key on disk -> logkey.pub is the public key.
    # If the ssh-agent protocol is used -> logkey is the public key.
    - name: Figure out where the log's public-key file is stored
      ansible.builtin.stat:
        path: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/logkey.pub"
      register: logkey_file

    - name: Copy primary log's public key
      ansible.builtin.copy:
        remote_src: true
        src: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/logkey{{ '.pub' if logkey_file.stat.exists else '' }}"
        dest: "{{ test_home }}/.config/sigsum/{{ sigsum_logname }}.pub"
        owner: "{{ test_user }}"
        group: "{{ test_user }}"
        mode: '0644'

    - name: Convert primary log's public key to hex format
      ansible.builtin.command: >
        "{{ test_home }}/.local/bin/sigsum-key" hex
          -k "{{ test_home }}/.config/sigsum/{{ sigsum_logname }}.pub"
      register: logkey
      become_user: "{{ test_user }}"
      become: true

    - name: Create sigsum policy without witnesses
      ansible.builtin.copy:
        content: |
          log {{ logkey.stdout }} http://localhost:{{ sigsum_external_endpoint | split(':') | last }}/{{ sigsum_url_prefix }}
          quorum none
        dest: "{{ test_home }}/.config/sigsum/policy"
        owner: "{{ test_user }}"
        group: "{{ test_user }}"
        mode: '0644'

    # Note: by generating a new key we can run `molecule verify` multiple times
    # with the same messages 0..test_num_messages and still get new log entries.
    # This only works for hosts that have rate limits disabled, hence "when".
    - name: Generate submit key for testing
      ansible.builtin.command: >
        "{{ test_home }}/.local/bin/sigsum-key" gen
          -o "{{ test_home }}/.config/sigsum/key"
      when: sigsum_allowlist_limit == -1
      become_user: "{{ test_user }}"
      become: true

    - name: Use fixed allow-listed submit key
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "{{ test_home }}/.config/sigsum/{{ item.name }}"
        owner: "{{ test_user }}"
        group: "{{ test_user }}"
        mode: '0644'
      loop:
        - name: key
          content: "{{ test_key }}"
        - name: key.pub
          content: "{{ test_pubkey }}"
      no_log: true  # don't bloat output with test keys
      when: sigsum_allowlist_limit != -1

    - name: Create test messages
      ansible.builtin.copy:
        content: "test message {{ item }}"
        dest: "{{ test_home }}/msg-{{ item }}"
      with_sequence: start=0 count="{{ test_num_messages }}"
      become_user: "{{ test_user }}"
      become: true

    - name: Ensure sigsum-submit is happy (no old proof files)
      ansible.builtin.file:
        path: "{{ test_home }}/msg-{{item }}.proof"
        state: absent
      with_sequence: start=0 count="{{ test_num_messages }}"

    - name: Log test messages
      ansible.builtin.command: |
        "{{ test_home }}/.local/bin/sigsum-submit" \
          -k "{{ test_home }}/.config/sigsum/key" \
          -p "{{ test_home }}/.config/sigsum/policy" \
          "{{ test_home }}/msg-{{ item }}"
      with_sequence: start=0 count="{{ test_num_messages }}"
      become_user: "{{ test_user }}"
      become: true

    - name: Verify test messages
      ansible.builtin.shell: |
        "{{ test_home }}/.local/bin/sigsum-verify" \
          -k "{{ test_home }}/.config/sigsum/key.pub" \
          -p "{{ test_home }}/.config/sigsum/policy" \
          "{{ test_home }}/msg-{{ item }}.proof" <"{{ test_home }}/msg-{{ item }}"
      with_sequence: start=0 count="{{ test_num_messages }}"
      become_user: "{{ test_user }}"
      become: true

    - name: Remove proof files
      ansible.builtin.file:
        path: "{{ test_home }}/msg-{{ item }}.proof"
        state: absent
      with_sequence: start=0 count="{{ test_num_messages }}"

    # Note: this will not result in new log entries, but the proofs will be
    # based on the same latest tree head.  Which means we will be getting some
    # less trivial proof queries (>1 node hash) being sent to the log server.
    - name: Attempt to log test messages again
      ansible.builtin.command: |
        "{{ test_home }}/.local/bin/sigsum-submit" \
          -k "{{ test_home }}/.config/sigsum/key" \
          -p "{{ test_home }}/.config/sigsum/policy" \
          "{{ test_home }}/msg-{{ item }}"
      with_sequence: start=0 count="{{ test_num_messages }}"
      become_user: "{{ test_user }}"
      become: true

    - name: Verify new proofs for the same test messages
      ansible.builtin.shell: |
        "{{ test_home }}/.local/bin/sigsum-verify" \
          -k "{{ test_home }}/.config/sigsum/key.pub" \
          -p "{{ test_home }}/.config/sigsum/policy" \
          "{{ test_home }}/msg-{{ item }}.proof" <"{{ test_home }}/msg-{{ item }}"
      with_sequence: start=0 count="{{ test_num_messages }}"
      become_user: "{{ test_user }}"
      become: true

- name: Ensure secondary log has the expected tree size
  hosts:
    - sigsum-secondary
  vars_files:
    - ../../roles/sigsum/defaults/main.yml  # role defaults
    - "host_vars/{{ inventory_hostname }}.yml"  # what converge used
    - host_vars/test.yml  # what this verify playbook additionally uses
  tasks:
    - name: Get tree head
      ansible.builtin.command: |
        curl http://localhost:{{ sigsum_internal_endpoint | split(':') | last }}/{{ sigsum_url_prefix }}/get-secondary-tree-head
      register: secondary_tree_head

    - name: Parse tree size
      ansible.builtin.set_fact:
        new_secondary_tree_size: "{{ secondary_tree_head.stdout | regex_findall('size=([0-9]+)') | first }}"

    - name: Assert correct tree size
      ansible.builtin.assert:
        that: (secondary_tree_size|int + test_num_messages) == new_secondary_tree_size|int

- name: Verify that log can be restarted by {{ sigsum_user }} user
  hosts:
    - sigsum-primary
    - sigsum-secondary
  vars_files:
    - ../../roles/sigsum/defaults/main.yml  # role defaults
    - "host_vars/{{ inventory_hostname }}.yml"  # what converge used
    - host_vars/test.yml  # what this verify playbook additionally uses
  tasks:
    - name: Restart log as {{ sigsum_user }} user
      ansible.builtin.shell: |
        sudo /usr/bin/systemctl restart "sigsum-log-{{ sigsum_role }}@{{ sigsum_logname }}"
      become_user: "{{ sigsum_user }}"
      become: true
