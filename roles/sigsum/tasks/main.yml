---
# TODO: Consider adding support for multiple instances running
# different versions of trillian and sigsum-log-go. For testing a new
# version, or for keeping an instance of an older protocol alive.
# WIP: just need make systemd into user-scope now as well.

- name: Include distribution-dependent tasks
  ansible.builtin.include_tasks: "{{ ansible_os_family }}.yml"

- name: Add sigsum user ({{ sigsum_user }})
  user:
    name: "{{ sigsum_user }}"
    password_lock: true
    home: "{{ sigsum_home }}"
    system: true

- name: Add user to shared ssh-agent group
  ansible.builtin.user:
    name: "{{ sigsum_user }}"
    groups: "{{ sigsum_ssh_auth_group }}"
    append: true
  when: sigsum_ssh_auth_group is defined

- name: Configure user directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"
    mode: '0700'
    state: directory
  loop:
    - "{{ sigsum_home }}"
    - "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}"
    - "{{ sigsum_home }}/.local/bin"

###
# (Re)install Go programs and notify handlers if the resulting binaries changed.
# A binary may change as a result of an updated Go compiler, changed Go module
# version, etc.  The handlers that will run are defined in vars/main.yml.
###
- name: Ensure sigsum-go binaries are up-to-date
  include_tasks: go.yml
  loop: "{{ sigsum_install_tools_from_sigsum_go }}"

- name: Ensure log-go binaries are up-to-date
  include_tasks: go.yml
  loop: "{{ sigsum_install_tools_from_log_go }}"

- name: Ensure trillian-go binaries are up-to-date
  include_tasks: go.yml
  loop: "{{ sigsum_install_tools_from_trillian_go }}"

###
# Install scripts
###
- name: Install sigsum-log start-up script
  template:
    src: sigsum-log-start.sh.j2
    dest: "{{ sigsum_home }}/.local/bin/sigsum-log-start.sh"
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"
    mode: '0700'

- name: Install trillian resetdb script
  copy:
    src: "{{ item }}"
    dest: "{{ sigsum_home }}/.local/bin/{{ item }}"
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"
    mode: '0700'
  loop:
    - storage.sql  # required by resetdb.sh
    - resetdb.sh  # modified to use the locally checked-out storage.sql

###
# Setup database
###
- name: Check if database exists
  community.mysql.mysql_db:
    name: "{{ sigsum_db_name }}"
    login_user: "{{ sigsum_user }}"
    login_password: "{{ sigsum_db_pw }}"
    state: present
  register: database_exists

- name: Configure database for the first time
  ansible.builtin.command: |
    "{{ sigsum_home }}/.local/bin/resetdb.sh" --force
  environment:
    MYSQL_USER: "{{ sigsum_user }}"
    MYSQL_DATABASE: "{{ sigsum_db_name }}"
    MYSQL_PASSWORD: "{{ sigsum_db_pw }}"
    MYSQL_ROOT_USER: "{{ mysql_root_user }}"
    MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
  when: database_exists.changed

###
# Configure public suffix list and rate limiting
###
- name: Install script that downloads files with jitter
  ansible.builtin.copy:
    src: download-file.sh
    dest: "{{ sigsum_home }}/.local/bin/download-file.sh"
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"
    mode: '0700'

- name: Check if the public suffix list exists
  ansible.builtin.stat:
    path: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/public-suffix-list.txt"
  register: sigsum_suffix_file

- name: Download the public suffix list for the first time
  ansible.builtin.command: >
      /bin/bash
      "{{ sigsum_home }}/.local/bin/download-file.sh"
      "{{ sigsum_suffix_list_url }}"
      "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/public-suffix-list.txt"
      0
  when: sigsum_suffix_file.stat.exists == false
  become_user: "{{ sigsum_user }}"
  become: true

- name: Add rate-limit configuration
  ansible.builtin.template:
    src: rate-limits.config.j2
    dest: "{{ sigsum_rate_limit_file }}"
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"
    mode: '0600'
  when: sigsum_role == "primary"
  notify: restart sigsum primary node

# TODO: trigger a restart if the list changed.  This would be trivial to do in
# the cronjob if we had a user-scoped .service file (unfortunately we don't).
- name: Install weekly refreshing of the public suffix list
  ansible.builtin.cron:
    name: "Refresh the public suffix list on Mondays between 0200 and 0600"
    user: "{{ sigsum_user }}"
    job: >
      /bin/bash
      "{{ sigsum_home }}/.local/bin/download-file.sh"
      "{{ sigsum_suffix_list_url }}"
      "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/public-suffix-list.txt"
      14400
    weekday: 1
    hour: 02
    minute: 00
    state: present

- name: Ensure cron is started and enabled
  ansible.builtin.systemd:
    name: cron
    state: started
    enabled: true

###
# Misc configuration
###
- name: Install service units
  template:
    src: "{{ item }}.service.j2"
    dest: "/lib/systemd/system/{{ item }}.service"
  with_items:
    - trillian-signer
    - trillian-server
    - sigsum-log-primary@
    - sigsum-log-secondary@
  notify: reload systemd

- name: Enable trillian service units
  systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - trillian-signer
    - trillian-server

- name: register sigsum_key_file
  ansible.builtin.set_fact:
    sigsum_key_file: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/logkey"
  when: sigsum_key_file == ""

- name: write sigsum_key_file
  become_user: "{{ sigsum_user }}"
  become: true
  ansible.builtin.copy:
    content: "{{sigsum_key}}"
    dest: "{{ sigsum_key_file }}"
    force: no
  when: sigsum_key != ""

- name: Check if primary key needs to be generated
  ansible.builtin.command: "/bin/true"
  args:
    creates: "{{ sigsum_key_file }}"
  notify: Generate primary key  # runs iff file does not exist

- name: write secondary_pubkey_file
  become_user: "{{ sigsum_user }}"
  become: true
  ansible.builtin.copy:
    content: "{{sigsum_secondary_pubkey}}"
    dest: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/secondary-pubkey"
    force: no
  when: sigsum_secondary_pubkey != "" and sigsum_secondary_pubkey_file == ""

- name: register secondary_pubkey_file
  ansible.builtin.set_fact:
    secondary_pubkey_file: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/secondary-pubkey"
  when: sigsum_secondary_pubkey != "" and sigsum_secondary_pubkey_file == ""

- name: register sigsum_policy_file
  ansible.builtin.set_fact:
    sigsum_policy_file: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/witness-config"
  when: sigsum_policy_file is not defined and sigsum_witness_config != ""

- name: write witness config
  become_user: "{{ sigsum_user }}"
  become: true
  ansible.builtin.copy:
    content: "{{sigsum_witness_config}}"
    dest: "{{ sigsum_policy_file }}"
  when: sigsum_policy_file is defined and sigsum_witness_config != ""

- name: Install primary configuration file
  template:
    src: "config.toml.j2"
    dest: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/config.toml"
  vars:
    primary: true
    sigsum_sth_file: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/sth"
    sigsum_trillian_tree_id_file: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/tree-id"
  become_user: "{{ sigsum_user }}"
  become: true
  when: sigsum_role == "primary"

- name: Install secondary configuration file
  template:
    src: "config.toml.j2"
    dest: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/config.toml"
  vars:
    secondary: true
    sigsum_key_file: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/logkey"
    sigsum_trillian_tree_id_file: "{{ sigsum_home }}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/tree-id"
  become_user: "{{ sigsum_user }}"
  become: true
  when: sigsum_role == "secondary"

- name: Enable sigsum primary service units
  systemd:
    name: "sigsum-log-primary@{{ sigsum_logname }}"
    enabled: true
    state: started
  when: sigsum_role == "primary"

- name: Enable sigsum secondary service units
  systemd:
    name: "sigsum-log-secondary@{{ sigsum_logname }}"
    enabled: true
    state: started
  when: sigsum_role == "secondary"

- name: register status of public key
  stat:
    path: "{{sigsum_key_file}}.pub"
  register: key_path

- name: Print public key
  when: "key_path.stat.exists"
  block:
    - name: "Read public key"
      slurp:
        src: "{{sigsum_key_file}}.pub"
      register: file_data
    - name: "Print public key of sigsum log {{sigsum_logname}}"
      debug:
        msg: "{{ file_data.content | b64decode}}"
