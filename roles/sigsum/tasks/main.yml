---

# TODO: Consider adding support for multiple instances running
# different versions of trillian and sigsum-log-go. For testing a new
# version, or for keeping an instance of an older protocol alive.

- name: Install golang-go
  block:
    - name: Add bookworm-backports source
      ansible.builtin.copy:
        content: 'deb https://ftp.acc.umu.se/debian bookworm-backports main'
        dest: /etc/apt/sources.list.d/bookworm-backports.list
        force: no
    - name: Update cache
      ansible.builtin.apt:
        update_cache: yes
    - name: Install from bookworm-backports
      ansible.builtin.apt:
        default_release: bookworm-backports
        pkg: golang-go
  when: ansible_distribution == 'Debian' and ansible_distribution_release == 'bookworm'

- name: Install git
  apt:
    pkg: git

- name: Create {{ sigsum_user }} user for sigsum
  user:
    name: "{{ sigsum_user }}"
    password_lock: true
    home: "/var/sigsum/{{ sigsum_user }}"
    system: true

- name: Prepare Trillian source directory
  file:
    path: "{{ sigsum_trillian_srcdir }}"
    state: directory
    mode: 0755
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"

- name: Prepare git.sigsum.org/sigsum-go source directory
  file:
    path: "{{ sigsum_lib_srcdir }}"
    state: directory
    mode: 0755
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"

- name: Prepare git.sigsum.org/log-go source directory
  file:
    path: "{{ sigsum_log_srcdir }}"
    state: directory
    mode: 0755
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"

- name: Clone Trillian
  become: yes
  become_user: "{{ sigsum_user }}"
  git:
    repo: "{{ sigsum_trillian_repo }}"
    version: "{{ sigsum_trillian_version }}"
    dest: "{{ sigsum_trillian_srcdir }}"

- name: Build and install Trillian
  become: yes
  become_user: "{{ sigsum_user }}"
  command: go install ./...
  args:
    chdir: "{{ sigsum_trillian_srcdir }}"

- name: Clone git.sigsum.org/sigsum-go
  become: yes
  become_user: "{{ sigsum_user }}"
  git:
    repo: "{{ sigsum_lib_repo }}"
    version: "{{ sigsum_lib_version }}"
    dest: "{{ sigsum_lib_srcdir }}"

- name: Build and install git.sigsum.org/sigsum-go
  become: yes
  become_user: "{{ sigsum_user }}"
  command: go install ./...
  args:
    chdir: "{{ sigsum_lib_srcdir }}"

- name: Clone git.sigsum.org/log-go
  become: yes
  become_user: "{{ sigsum_user }}"
  git:
    repo: "{{ sigsum_log_repo }}"
    version: "{{ sigsum_log_version }}"
    dest: "{{ sigsum_log_srcdir }}"

- name: Build and install git.sigsum.org/log-go
  become: yes
  become_user: "{{ sigsum_user }}"
  shell: go install -ldflags="-X main.gitCommit=$(git describe --always)" ./...
  args:
    chdir: "{{ sigsum_log_srcdir }}"
  notify:
    - restart sigsum primary node
    - restart sigsum secondary node

# Try to create the database, if it sucsseeds, then we
# should run the resetdb.sh script.
- name: check if database exists
  community.mysql.mysql_db:
    name: "{{ sigsum_db_name }}"
    login_user: "{{ sigsum_user }}"
    login_password: "{{ sigsum_db_pw }}"
    state: present
  register: database_exists

- name: Setup database
  when: database_exists.changed
  block:
    - name: Initiate db without password
      command: "{{ sigsum_trillian_srcdir }}/scripts/resetdb.sh --force"
      args:
        chdir: "{{ sigsum_trillian_srcdir }}"
      environment:
        MYSQL_USER: "{{ sigsum_user }}"
        MYSQL_DATABASE: "{{ sigsum_db_name }}"
        MYSQL_PASSWORD: "{{ sigsum_db_pw }}"
        MYSQL_ROOT_USER: "{{ mysql_root_user }}"
      when: mysql_root_password == ""

    - name: Initiate db with password
      command: "{{ sigsum_trillian_srcdir }}/scripts/resetdb.sh --force"
      args:
        chdir: "{{ sigsum_trillian_srcdir }}"
      environment:
        MYSQL_USER: "{{ sigsum_user }}"
        MYSQL_DATABASE: "{{ sigsum_db_name }}"
        MYSQL_PASSWORD: "{{ sigsum_db_pw }}"
        MYSQL_ROOT_USER: "{{ mysql_root_user }}"
        MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
      when: mysql_root_password != ""

- name: Install sigsum-log startup script
  copy:
    src: sigsum-log-start.sh
    dest: /usr/bin/sigsum-log-start.sh
    mode: 0755

- name: Install service units
  template:
    src: "{{ item }}.service.j2"
    dest: "/lib/systemd/system/{{ item }}.service"
  with_items:
    - trillian-signer
    - trillian-server
    - sigsum-log-primary@
    - sigsum-log-secondary@
  notify: reload systemd

- name: Enable trillian service units
  systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - trillian-signer
    - trillian-server

- name: Prepare config directories for sigsum instance
  file:
    path: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}"
    state: directory
    mode: 0755
    owner: "{{ sigsum_user }}"
    group: "{{ sigsum_user }}"
  become_user: "{{ sigsum_user }}"
  become: true

- name: register sigsum_key_file
  ansible.builtin.set_fact:
    sigsum_key_file: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/logkey"
  when: sigsum_key_file == ""

- name: write sigsum_key_file
  become_user: "{{ sigsum_user }}"
  become: true
  ansible.builtin.copy:
    content: "{{sigsum_key}}"
    dest: "{{ sigsum_key_file }}"
    force: no
  when: sigsum_key != ""

# This should not overwrite the file if it exists
- name: generate sigsum key
  become_user: "{{ sigsum_user }}"
  become: true
  command: "./go/bin/sigsum-key gen -o {{ sigsum_key_file }}"
  args:
    creates: "{{ sigsum_key_file }}"
    chdir: "/var/sigsum/{{sigsum_user}}"

- name: write secondary_pubkey_file
  become_user: "{{ sigsum_user }}"
  become: true
  ansible.builtin.copy:
    content: "{{sigsum_secondary_pubkey}}"
    dest: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/secondary-pubkey"
    force: no
  when: sigsum_secondary_pubkey != "" and sigsum_secondary_pubkey_file == ""

- name: register secondary_pubkey_file
  ansible.builtin.set_fact:
    secondary_pubkey_file: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/secondary-pubkey"
  when: sigsum_secondary_pubkey != "" and sigsum_secondary_pubkey_file == ""

- name: register sigsum_policy_file
  ansible.builtin.set_fact:
    sigsum_policy_file: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/witness-config"
  when: sigsum_policy_file is not defined and sigsum_witness_config != ""

- name: write witness config
  become_user: "{{ sigsum_user }}"
  become: true
  ansible.builtin.copy:
    content: "{{sigsum_witness_config}}"
    dest: "{{ sigsum_policy_file }}"
  when: sigsum_policy_file is defined and sigsum_witness_config != ""

- name: Install primary configuration file
  template:
    src: "config.toml.j2"
    dest: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/config.toml"
  vars:
    primary: true
    sigsum_sth_file: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/sth"
    sigsum_trillian_tree_id_file: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/tree-id"
  become_user: "{{ sigsum_user }}"
  become: true
  when: sigsum_role == "primary"

- name: Install secondary configuration file
  template:
    src: "config.toml.j2"
    dest: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/config.toml"
  vars:
    secondary: true
    sigsum_key_file: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/logkey"
    sigsum_trillian_tree_id_file: "/var/sigsum/{{sigsum_user}}/{{ sigsum_configdir_base }}/{{ sigsum_logname }}/tree-id"
  become_user: "{{ sigsum_user }}"
  become: true
  when: sigsum_role == "secondary"


- name: Enable sigsum primary service units
  systemd:
    name: "sigsum-log-primary@{{ sigsum_logname }}"
    enabled: true
    state: started
  when: sigsum_role == "primary"

- name: Enable sigsum secondary service units
  systemd:
    name: "sigsum-log-secondary@{{ sigsum_logname }}"
    enabled: true
    state: started
  when: sigsum_role == "secondary"

- name: register status of public key
  stat:
    path: "{{sigsum_key_file}}.pub"
  register: key_path

- name: Print public key
  when: "key_path.stat.exists"
  block:
    - name: "Read public key"
      slurp:
        src: "{{sigsum_key_file}}.pub"
      register: file_data
    - name: "Print public key of sigsum log {{sigsum_logname}}"
      debug:
        msg: "{{ file_data.content | b64decode}}"
