---How to install molecule on Debian

First ensure you have podman and python3-venv installed:

    $ apt install podman python3-venv

Then install molecule using pip in a Python virtual environment
(venv):

    $ python3 -m venv venv
    $ source venv/bin/activate
    $ pip install molecule molecule-podman

Using a Python virtual environment in this way means that venv/bin is
added to your PATH environment variable (the "activate" script does
that for you), and all packages installed by pip are also installed in
the venv directory. You can then run tests using molecule as described
below. (If you then want to cleanup then just exit your shell and
remove the venv directory.)

---How to run all molecule tests

    $ molecule test
    $ molecule test -s golang
    $ molecule test -s sigsum_agent
    $ molecule test -s yubihsm_connector
    $ molecule test -s litewitness

---How to develop with molecule

Interactive deploy, debug, deploy again, verify, and clean-up session:

    $ molecule converge
    $ molecule login --host sigsum-primary
    $ molecule login --host sigsum-primary-ssh-agent
    $ molecule converge
    $ molecule verify
    $ molecule destroy

To work with a different scenario like ./molecule/golang, use "-s golang".

---How to make a release

Ensure that all molecule tests pass.

Update docs/docsite/rst/CHANGELOG.rst.

Update galaxy.yml 'version'.

Create a signed tag:

    $ git tag --sign v${VERSION} -m "Release ${VERSION}"
    $ git push --tags
